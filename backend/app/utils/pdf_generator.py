"""
PDF Generator utility for dental clinic reports using ReportLab.
Handles both detailed activity reports and monthly consolidated reports.
"""

from io import BytesIO
from datetime import datetime
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, landscape
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Table, TableStyle, Spacer,
    Image, KeepInFrame
)
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from app.schemas.report_schema import ActivityReport, MonthlyReport
import os

# -------------------------------------------------------------------
# Common color palette and table row backgrounds
# -------------------------------------------------------------------
PALETTE_COLOR = colors.Color(0x1C / 255, 0x62 / 255, 0x8C / 255)
LIGHT_ROW = colors.whitesmoke
ALT_ROW = colors.Color(0.93, 0.96, 0.98)


def get_common_styles():
    """
    Define and return common paragraph styles used across all reports.
    """
    styles = getSampleStyleSheet()

    return {
        'title': ParagraphStyle(
            'Title',
            parent=styles['Heading1'],
            textColor=PALETTE_COLOR,
            alignment=1,  # Center alignment
            spaceAfter=10
        ),
        'period': ParagraphStyle(
            'PeriodInfo',
            parent=styles['Normal'],
            alignment=1,
            spaceAfter=12
        ),
        'footer': ParagraphStyle(
            'Footer',
            parent=styles['Normal'],
            fontSize=9,
            alignment=2,  # Right alignment
            textColor=PALETTE_COLOR
        ),
        'centered_text': ParagraphStyle(
            'CenteredText',
            parent=styles['Normal'],
            alignment=1,
            fontSize=10,
            leading=12
        )
    }


def get_clinic_header(elements):
    """
    Generates the header section for the clinic reports, including logo and contact info.

    Args:
        elements (list): The list of elements to append header components to.
    """
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
    logo_path = os.path.join(BASE_DIR, "..", "static", "bytedental-logoAzul.png")

    # Try to load the clinic logo
    try:
        logo = Image(logo_path, width=100, height=60)
        logo.hAlign = 'CENTER'
        elements.append(logo)
    except Exception:
        # Fallback if the logo is missing
        elements.append(Paragraph("<b>ORALCENTER WHITE</b>", get_common_styles()['title']))

    elements.append(Spacer(1, 6))
    common_styles = get_common_styles()

    # Clinic contact and description text
    clinic_info = [
        "Sonrisas sanas, brillantes y naturales",
        "Odontología general · Blanqueamiento · Ortodoncia",
        "<b>DR. CARLOS MORENO - ODONTÓLOGO</b>",
        "Calle 16 # 13-40, Centro-Sur, Duitama, Boyacá, Colombia, "
        "Cel: 316 5181414 Email: oralcenterw@gmail.com"
    ]

    for info in clinic_info:
        elements.append(Paragraph(info, common_styles['centered_text']))


def generate_activity_pdf(report_data: ActivityReport) -> bytes:
    """
    Generate a PDF report for dental activities performed within a specified date range.

    Args:
        report_data (ActivityReport): Data model containing activity details.

    Returns:
        bytes: The generated PDF as a byte stream.
    """
    buffer = BytesIO()
    doc = SimpleDocTemplate(
        buffer,
        pagesize=landscape(letter),
        leftMargin=30, rightMargin=30,
        topMargin=30, bottomMargin=30
    )
    elements = []
    common_styles = get_common_styles()

    # --- Header Section ---
    get_clinic_header(elements)
    elements.append(Spacer(1, 12))

    # --- Title and Period ---
    elements.append(Paragraph(
        "<b>FORMULARIO CONSOLIDADO DE ACTIVIDADES ODONTOLÓGICAS</b>",
        common_styles['title']
    ))
    elements.append(Paragraph(
        f"Periodo: {report_data.start_date.strftime('%Y-%m-%d')} "
        f"a {report_data.end_date.strftime('%Y-%m-%d')}",
        common_styles['period']
    ))

    # --- Generated By Section ---
    if hasattr(report_data, "generated_by") and report_data.generated_by:
        elements.append(Paragraph(
            f"<b>Generado por:</b> {report_data.generated_by}",
            common_styles['centered_text']
        ))
        elements.append(Spacer(1, 10))

    # --- Table Data Preparation ---
    headers = [
        'FECHA/HORA', 'NOMBRE DEL PACIENTE', 'DOCUMENTO', 'TELÉFONO',
        'PROCEDIMIENTO EJECUTADO', 'DOCTOR'
    ]
    data = [headers]

    table_text_style = ParagraphStyle(
        'TableText',
        parent=common_styles['centered_text'],
        wordWrap='CJK'
    )

    for activity in report_data.activities:
        data.append([
            activity.treatment_date.strftime('%Y-%m-%d %H:%M'),
            activity.patient_name,
            activity.document_number,
            activity.phone,
            Paragraph(activity.procedure_name, table_text_style),
            activity.doctor_name
        ])

    # --- Table Configuration ---
    colWidths = [1.2 * inch, 1.8 * inch, 1.4 * inch, 1.4 * inch, 3.2 * inch, 1.5 * inch]
    table = Table(data, colWidths=colWidths, hAlign='CENTER')

    # --- Table Styling ---
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), PALETTE_COLOR),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
        ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 6),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('ALIGN', (0, 1), (4, -1), 'LEFT'),
        ('ALIGN', (2, 1), (3, -1), 'CENTER'),
        ('ALIGN', (5, 1), (5, -1), 'CENTER'),
        ('LEFTPADDING', (0, 0), (-1, -1), 3),
        ('RIGHTPADDING', (0, 0), (-1, -1), 3),
    ]))

    elements.append(table)

    # --- Footer Section ---
    elements.append(Spacer(1, 10))
    elements.append(Paragraph(
        f"Reporte generado el: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} "
        f"por {report_data.generated_by}",
        common_styles['footer']
    ))

    doc.build(elements)
    return buffer.getvalue()



def generate_monthly_pdf(report_data: MonthlyReport) -> bytes:
    """
    Generate a monthly consolidated PDF report summarizing dental activities and adverse events.

    Args:
        report_data (MonthlyReport): Data model containing monthly summary information.

    Returns:
        bytes: The generated PDF as a byte stream.
    """
    buffer = BytesIO()
    doc = SimpleDocTemplate(
        buffer,
        pagesize=letter,
        leftMargin=40, rightMargin=40,
        topMargin=50, bottomMargin=40
    )
    elements = []
    common_styles = get_common_styles()

    # --- Header Section ---
    get_clinic_header(elements)
    elements.append(Table(
        [['']],
        colWidths=[7 * inch],
        style=[('LINEBELOW', (0, 0), (-1, -1), 0.75, PALETTE_COLOR)]
    ))
    elements.append(Spacer(1, 16))

    # --- Title and Period ---
    elements.append(Paragraph(
        "<b>FORMULARIO CONSOLIDADO MENSUAL DE ACTIVIDADES "
        "ODONTOLÓGICAS Y EVENTOS ADVERSOS</b>",
        common_styles['title']
    ))
    elements.append(Paragraph(
        f"Periodo: {report_data.start_date.strftime('%Y-%m-%d')} "
        f"a {report_data.end_date.strftime('%Y-%m-%d')}",
        common_styles['period']
    ))

    # --- Responsible and Period Information ---
    MONTH_NAMES = [
        "", "ENERO", "FEBRERO", "MARZO", "ABRIL", "MAYO", "JUNIO",
        "JULIO", "AGOSTO", "SEPTIEMBRE", "OCTUBRE", "NOVIEMBRE", "DICIEMBRE"
    ]
    month_name = MONTH_NAMES[report_data.month] if 0 < report_data.month <= 12 else f"{report_data.month:02d}"

    label_style = ParagraphStyle('Label', parent=common_styles['centered_text'], fontSize=9, textColor=PALETTE_COLOR)
    value_style = ParagraphStyle('Value', parent=common_styles['centered_text'], fontSize=10, leading=12)

    responsible_data = [[
        Paragraph("<b>RESPONSABLE:</b>", label_style),
        Paragraph(report_data.generated_by, value_style),
        Paragraph("<b>MES:</b>", label_style),
        Paragraph(month_name, value_style),
        Paragraph("<b>AÑO:</b>", label_style),
        Paragraph(str(report_data.year), value_style)
    ]]

    responsible_table = Table(
        responsible_data,
        colWidths=[1.2 * inch, 2.2 * inch, 0.5 * inch, 1.0 * inch, 0.5 * inch, 1.0 * inch]
    )
    responsible_table.setStyle(TableStyle([
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 3),
        ('LINEBELOW', (1, 0), (1, 0), 0.6, colors.black),
        ('LINEBELOW', (3, 0), (3, 0), 0.6, colors.black),
        ('LINEBELOW', (5, 0), (5, 0), 0.6, colors.black),
        ('TOPPADDING', (0, 0), (-1, -1), 2),
    ]))

    elements.append(KeepInFrame(7 * inch, 0.5 * inch, [responsible_table], hAlign='CENTER'))
    elements.append(Spacer(1, 14))

    # --- Main Data Table ---
    data = [['PROCEDIMIENTOS EJECUTADOS', 'CANTIDAD DE PACIENTES']]
    for procedure in report_data.procedures:
        data.append([
            Paragraph(procedure.procedure_name, common_styles['centered_text']),
            Paragraph(str(procedure.patient_count), common_styles['centered_text'])
        ])

    # Total row
    data.append([
        Paragraph("<b>Total de pacientes atendidos durante el mes</b>", common_styles['centered_text']),
        Paragraph(f"<b>{report_data.total_patients}</b>", common_styles['centered_text'])
    ])

    table = Table(data, colWidths=[5.0 * inch, 2.0 * inch], hAlign='CENTER')

    # --- Enhanced Table Styling ---
    style_commands = [
        # Header
        ('BACKGROUND', (0, 0), (-1, 0), PALETTE_COLOR),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
        ('TOPPADDING', (0, 0), (-1, 0), 8),

        # General layout and grid
        ('GRID', (0, 0), (-1, -1), 0.5, colors.lightgrey),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('LEFTPADDING', (0, 0), (-1, -1), 6),
        ('RIGHTPADDING', (0, 0), (-1, -1), 6),

        # Total row
        ('BACKGROUND', (0, -1), (-1, -1), colors.Color(0.9, 0.95, 0.98)),
        ('TEXTCOLOR', (0, -1), (-1, -1), PALETTE_COLOR),
        ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),
        ('LINEABOVE', (0, -1), (-1, -1), 1, PALETTE_COLOR),
    ]

    # Alternating row background colors
    for i in range(1, len(data) - 1):
        color = ALT_ROW if i % 2 == 0 else LIGHT_ROW
        style_commands.append(('BACKGROUND', (0, i), (-1, i), color))

    table.setStyle(TableStyle(style_commands))
    elements.append(table)

    # --- Footer ---
    elements.append(Spacer(1, 18))
    elements.append(Paragraph(
        f"Reporte generado el: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} "
        f"por {report_data.generated_by}",
        common_styles['footer']
    ))
    
    doc.build(elements)
    return buffer.getvalue()
