name: Security Testing Suite

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:
  
permissions:
  contents: read
  actions: read
  pull-requests: write
  
jobs:
  security-scan:
    name: Login Security Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: ['sql-injection', 'xss-injection', 'auth-bypass', 'brute-force']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests urllib3 pytest

    - name: Wait for deployment
      if: github.event_name == 'push'
      run: |
        echo "Esperando que el deployment est√© listo..."
        sleep 60

    - name: Run Security Tests
      env:
        TARGET_URL: ${{ secrets.STAGING_URL || 'http://localhost:5173' }}
        TEST_TYPE: ${{ matrix.test-type }}
      run: |
        python SecurityTesting.py --test-type $TEST_TYPE --url $TARGET_URL

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ matrix.test-type }}
        path: |
          security_report_*.json
          security_report_*.csv
          security_test_*.log
        retention-days: 30

  consolidate-results:
    name: Consolidate Security Results
    runs-on: ubuntu-latest
    needs: security-scan
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Consolidate reports
      run: |
        mkdir -p consolidated-reports
        find . -name "security_report_*.json" -exec cp {} consolidated-reports/ \;
        
        # Consolidar en JSON + HTML
        python - <<'PYCODE'
        import json, glob, os
        from datetime import datetime

        all_results = []
        for file in glob.glob('consolidated-reports/*.json'):
            try:
                with open(file, 'r') as f:
                    data = json.load(f)
                    if isinstance(data, list):
                        all_results.extend(data)
                    else:
                        all_results.append(data)
            except Exception as e:
                print(f'Error reading {file}: {e}')

        final_report = {
            'timestamp': datetime.now().isoformat(),
            'total_tests': len(all_results),
            'vulnerabilities': [r for r in all_results if r.get('vulnerable', False)],
            'all_results': all_results
        }

        # Guardar JSON
        with open('consolidated-security-report.json', 'w') as f:
            json.dump(final_report, f, indent=2)

        # Generar HTML sencillo
        html = f"""
        <html>
        <head><title>Security Report</title></head>
        <body>
        <h1>üõ°Ô∏è Security Test Results</h1>
        <p><b>Timestamp:</b> {final_report['timestamp']}</p>
        <p><b>Total Tests:</b> {final_report['total_tests']}</p>
        <p><b>Vulnerabilities:</b> {len(final_report['vulnerabilities'])}</p>
        <ul>
        {''.join(f"<li><b>{v.get('test_type','?')}</b>: {v.get('description') or v.get('payload','No details')}</li>" for v in final_report['vulnerabilities'])}
        </ul>
        </body>
        </html>
        """
        with open('consolidated-security-report.html', 'w') as f:
            f.write(html)

        # Mostrar resumen y controlar salida
        vuln_count = len(final_report['vulnerabilities'])
        print(f"Total tests: {final_report['total_tests']}")
        print(f"Vulnerabilities found: {vuln_count}")
        if vuln_count > 0:
            print("CRITICAL: Vulnerabilities detected!")
            exit(1)
        PYCODE

    - name: Upload Consolidated Reports
      uses: actions/upload-artifact@v4
      with:
        name: consolidated-security-report
        path: |
          consolidated-security-report.json
          consolidated-security-report.html

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          if (!fs.existsSync('consolidated-security-report.json')) {
            console.log('No consolidated report found');
            return;
          }
          
          const report = JSON.parse(fs.readFileSync('consolidated-security-report.json', 'utf8'));
          
          const comment = `## üõ°Ô∏è Security Test Results
          
          **Total Tests:** ${report.total_tests}
          **Vulnerabilities:** ${report.vulnerabilities.length}
          
          ${report.vulnerabilities.length > 0 ? 
            '‚ö†Ô∏è **CRITICAL**: Vulnerabilities detected!\n\n' + 
            report.vulnerabilities.map(v => `- **${v.test_type}**: ${v.payload || v.description || 'No details'}`).join('\n') 
            : '‚úÖ No vulnerabilities detected'}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
