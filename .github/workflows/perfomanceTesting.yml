name: Performance & Load Testing

on:
  push:
    branches: [ "main" ]
  schedule:
    - cron: '0 1 * * *' # Diariamente a la 1:00 AM
  workflow_dispatch:  # Agregar ejecuci√≥n manual para testing

jobs:
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install load testing tools
      run: |
        pip install locust requests

    - name: Verify target URL
      env:
        TARGET_URL: ${{ secrets.STAGING_URL }}
      run: |
        echo "Target URL: $TARGET_URL"
        if [ -z "$TARGET_URL" ]; then
          echo "ERROR: TARGET_URL is empty"
          exit 1
        fi
        
        # Verificar que el endpoint est√© disponible
        curl -f $TARGET_URL || echo "Warning: URL may not be accessible"

    - name: Create Locust test file
      run: |
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        import json
        import logging

        class LoginUser(HttpUser):
            wait_time = between(1, 3)
            
            def on_start(self):
                """Ejecutar al inicio de cada usuario virtual"""
                self.client.verify = False  # Para desarrollo/staging
                
            @task(3)
            def test_home_page(self):
                """Probar p√°gina principal (peso 3)"""
                with self.client.get("/", catch_response=True) as response:
                    if response.status_code == 200:
                        response.success()
                    else:
                        response.failure(f"Got status code {response.status_code}")
                        
            @task(2)
            def test_login_page(self):
                """Probar p√°gina de login (peso 2)"""
                with self.client.get("/login", catch_response=True) as response:
                    if response.status_code in [200, 404]:  # 404 puede ser normal en SPA
                        response.success()
                    else:
                        response.failure(f"Got status code {response.status_code}")
                        
            @task(1)
            def test_api_health(self):
                """Probar endpoint de salud del API (peso 1)"""
                with self.client.get("/api/health", catch_response=True) as response:
                    if response.status_code in [200, 404]:  # 404 si no existe el endpoint
                        response.success()
                    else:
                        response.failure(f"Got status code {response.status_code}")
                        
            @task(1)
            def test_login_attempt(self):
                """Probar intento de login (peso 1)"""
                payload = {
                    "email": "test@example.com",
                    "password": "testpass"
                }
                with self.client.post("/api/auth/login", 
                                    json=payload,
                                    headers={"Content-Type": "application/json"},
                                    catch_response=True) as response:
                    # Aceptar tanto 400 (credenciales incorrectas) como otros c√≥digos
                    if response.status_code in [200, 400, 401, 404]:
                        response.success()
                    else:
                        response.failure(f"Got unexpected status code {response.status_code}")
        EOF

    - name: Run load tests
      env:
        TARGET_URL: ${{ secrets.STAGING_URL }}
      run: |
        echo "Starting load test against: $TARGET_URL"
        
        # Ejecutar Locust con par√°metros m√°s conservadores
        locust -f locustfile.py \
          --headless \
          --users 10 \
          --spawn-rate 2 \
          --run-time 30s \
          --host $TARGET_URL \
          --html load_test_report.html \
          --csv load_test_results
          
    - name: Display test results
      if: always()
      run: |
        echo "=== LOAD TEST RESULTS ==="
        if [ -f load_test_results_stats.csv ]; then
          cat load_test_results_stats.csv
        fi
        
        if [ -f load_test_results_failures.csv ]; then
          echo -e "\n=== FAILURES ==="
          cat load_test_results_failures.csv
        fi

    - name: Upload load test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: load-test-results
        path: |
          load_test_report.html
          load_test_results_*.csv
        retention-days: 30

    - name: Analyze results and set status
      if: always()
      run: |
        # Verificar si hay demasiados errores
        if [ -f load_test_results_stats.csv ]; then
          # Extraer tasa de error (asumiendo formato CSV est√°ndar de Locust)
          ERROR_RATE=$(tail -n 1 load_test_results_stats.csv | cut -d',' -f10 | tr -d '%')
          
          echo "Error rate: ${ERROR_RATE}%"
          
          # Si la tasa de error es mayor al 50%, fallar el job
          if (( $(echo "$ERROR_RATE > 50" | bc -l) )); then
            echo "‚ùå Load test failed: Error rate too high (${ERROR_RATE}%)"
            exit 1
          else
            echo "‚úÖ Load test passed: Error rate acceptable (${ERROR_RATE}%)"
          fi
        fi

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = "## üöÄ Load Test Results\n\n";
          
          try {
            if (fs.existsSync('load_test_results_stats.csv')) {
              const stats = fs.readFileSync('load_test_results_stats.csv', 'utf8');
              const lines = stats.split('\n');
              
              if (lines.length > 1) {
                const headers = lines[0].split(',');
                const data = lines[lines.length - 2].split(','); // √öltima l√≠nea con datos
                
                comment += `**Target:** ${process.env.TARGET_URL}\n`;
                comment += `**Users:** 10 virtual users\n`;
                comment += `**Duration:** 30 seconds\n\n`;
                comment += `**Results:**\n`;
                comment += `- Total Requests: ${data[1] || 'N/A'}\n`;
                comment += `- Failures: ${data[2] || 'N/A'}\n`;
                comment += `- Average Response Time: ${data[5] || 'N/A'}ms\n`;
                comment += `- Min Response Time: ${data[6] || 'N/A'}ms\n`;
                comment += `- Max Response Time: ${data[7] || 'N/A'}ms\n`;
              }
            } else {
              comment += "‚ùå No se pudieron generar estad√≠sticas de load testing.";
            }
          } catch (error) {
            comment += `‚ùå Error al procesar resultados: ${error.message}`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });